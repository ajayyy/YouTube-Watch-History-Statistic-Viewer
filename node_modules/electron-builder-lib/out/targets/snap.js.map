{"version":3,"file":"snap.js","sourceRoot":"","sources":["../../src/targets/snap.ts"],"names":[],"mappings":"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","sourcesContent":["import { Arch, exec, log, replaceDefault, serializeToYaml, spawn, toLinuxArchString } from \"builder-util\"\nimport { copyFile } from \"builder-util/out/fs\"\nimport { outputFile } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { Target } from \"../core\"\nimport { LinuxPackager } from \"../linuxPackager\"\nimport { SnapOptions } from \"../options/SnapOptions\"\nimport { LinuxTargetHelper } from \"./LinuxTargetHelper\"\nimport { createStageDir, StageDir } from \"./targetUtil\"\n\n// usr/share/fonts is required, cannot run otherwise\nconst unnecessaryFiles = [\n  \"usr/share/doc\",\n  \"usr/share/man\",\n  \"usr/share/icons\",\n  \"usr/share/bash-completion\",\n  \"usr/share/lintian\",\n  \"usr/share/dh-python\",\n  \"usr/share/python3\",\n\n  \"usr/lib/python*\",\n  \"usr/bin/python*\",\n]\n\nexport default class SnapTarget extends Target {\n  readonly options: SnapOptions = {...this.packager.platformSpecificBuildOptions, ...(this.packager.config as any)[this.name]}\n\n  constructor(name: string, private readonly packager: LinuxPackager, private readonly helper: LinuxTargetHelper, readonly outDir: string) {\n    super(name)\n  }\n\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    log(`Building Snap for arch ${Arch[arch]}`)\n\n    const packager = this.packager\n    const appInfo = packager.appInfo\n    const options = this.options\n\n    const stageDir = await createStageDir(this, packager, arch)\n    // snapcraft.yaml inside a snap directory\n    const snapDir = path.join(stageDir.dir, \"snap\")\n\n    const snap: any = {}\n    snap.name = packager.executableName.toLowerCase()\n    snap.version = appInfo.version\n    snap.summary = options.summary || appInfo.productName\n    snap.description = this.helper.getDescription(options)\n    snap.confinement = options.confinement || \"strict\"\n    snap.grade = options.grade || \"stable\"\n\n    await this.helper.icons\n    if (this.helper.maxIconPath != null) {\n      snap.icon = \"snap/gui/icon.png\"\n      await copyFile(this.helper.maxIconPath, path.join(snapDir, \"gui\", \"icon.png\"))\n    }\n\n    const desktopFile = await this.helper.writeDesktopEntry(this.options, packager.executableName, path.join(snapDir, \"gui\", `${snap.name}.desktop`), {\n      // tslint:disable:no-invalid-template-strings\n      Icon: \"${SNAP}/meta/gui/icon.png\"\n    })\n\n    if (options.assumes != null) {\n      if (!Array.isArray(options.assumes)) {\n        throw new Error(\"snap.assumes must be an array of strings\")\n      }\n      snap.assumes = options.assumes\n    }\n\n    snap.apps = {\n      [snap.name]: {\n        command: `env TMPDIR=$XDG_RUNTIME_DIR desktop-launch $SNAP/${packager.executableName}`,\n        plugs: replaceDefault(options.plugs, [\"home\", \"x11\", \"unity7\", \"browser-support\", \"network\", \"gsettings\", \"pulseaudio\", \"opengl\"])\n      }\n    }\n\n    const isUseDocker = process.platform !== \"linux\"\n    // libxss1, libasound2, gconf2 - was \"error while loading shared libraries: libXss.so.1\" on Xubuntu 16.04\n    const defaultStagePackages = [\"libnotify4\", \"libappindicator1\", \"libxtst6\", \"libnss3\", \"libxss1\", \"fontconfig-config\", \"gconf2\", \"libasound2\", \"pulseaudio\"]\n    const defaultAfter = [\"desktop-glib-only\"]\n    const after = replaceDefault(options.after, defaultAfter)\n    snap.parts = {\n      app: {\n        plugin: \"dump\",\n        \"stage-packages\": replaceDefault(options.stagePackages, defaultStagePackages),\n        source: isUseDocker ? \"/appOutDir\" : appOutDir,\n        after\n      }\n    }\n\n    const stagePackages = replaceDefault(options.stagePackages, defaultStagePackages)\n    if (stagePackages.length > 0) {\n      snap.parts.app[\"stage-packages\"] = stagePackages\n    }\n\n    if (packager.packagerOptions.effectiveOptionComputed != null && await packager.packagerOptions.effectiveOptionComputed({snap, desktopFile})) {\n      return\n    }\n\n    const snapcraftFile = path.join(snapDir, \"snapcraft.yaml\")\n    await outputFile(snapcraftFile, serializeToYaml(snap))\n\n    const snapFileName = `${snap.name}_${snap.version}_${toLinuxArchString(arch)}.snap`\n    const resultFile = path.join(this.outDir, snapFileName)\n\n    if (isUseDocker) {\n      await this.buildUsingDocker(options, arch, snapFileName, stageDir, appOutDir)\n    }\n    else {\n      if (options.buildPackages != null && options.buildPackages.length > 0) {\n        await spawn(\"apt-get\", [\"-qq\", \"update\"])\n        await spawn(\"apt-get\", [\"-qq\", \"install\", \"--no-install-recommends\"].concat(options.buildPackages))\n      }\n      const spawnOptions = {\n        cwd: stageDir.dir,\n        stdio: [\"ignore\", \"inherit\", \"inherit\"],\n      }\n      await spawn(\"snapcraft\", [\"prime\", \"--target-arch\", toLinuxArchString(arch)], spawnOptions)\n      await exec(\"/bin/bash\", [\"-c\", `rm -rf ${unnecessaryFiles.join(\" \")}`], {\n        cwd: stageDir.dir + path.sep + \"prime\",\n      })\n      await spawn(\"snapcraft\", [\"snap\", \"--target-arch\", toLinuxArchString(arch), \"-o\", resultFile], spawnOptions)\n    }\n\n    await stageDir.cleanup()\n    packager.dispatchArtifactCreated(resultFile, this, arch)\n  }\n\n  private async buildUsingDocker(options: SnapOptions, arch: Arch, snapFileName: string, stageDir: StageDir, appOutDir: string) {\n    const commands: Array<string> = []\n    if (options.buildPackages != null && options.buildPackages.length > 0) {\n      commands.push(`apt-get update && apt-get install -y ${options.buildPackages.join(\" \")}`)\n    }\n\n    // copy stage to linux fs to avoid performance issues (https://docs.docker.com/docker-for-mac/osxfs-caching/)\n    commands.push(`cp -R /stage /s/`)\n    commands.push(\"cd /s\")\n    commands.push(\"apt-get -qq update\")\n    commands.push(`snapcraft prime --target-arch ${toLinuxArchString(arch)}`)\n    commands.push(`rm -rf ${unnecessaryFiles.map(it => `prime/${it}`).join(\" \")}`)\n    commands.push(`snapcraft snap --target-arch ${toLinuxArchString(arch)} -o /out/${snapFileName}`)\n\n    const packager = this.packager\n    await spawn(\"docker\", [\"run\", \"--rm\",\n      \"-v\", `${packager.info.projectDir}:/project:delegated`,\n      // dist dir can be outside of project dir\n      \"-v\", `${this.outDir}:/out`,\n      \"-v\", `${stageDir.dir}:/stage:ro`,\n      \"-v\", `${appOutDir}:/appOutDir:ro`,\n      \"electronuserland/builder:latest\",\n      \"/bin/bash\", \"-c\", commands.join(\" && \"),\n    ], {\n      cwd: packager.info.projectDir,\n      stdio: [\"ignore\", \"inherit\", \"inherit\"],\n    })\n  }\n}\n"]}
