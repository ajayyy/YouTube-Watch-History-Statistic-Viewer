"use strict";
/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* jshint maxlen: false */
const apirequest_1 = require("../../lib/apirequest");
/**
 * Dialogflow API
 *
 * An end-to-end development suite for conversational interfaces (e.g., chatbots, voice-powered apps and devices).
 *
 * @example
 * const google = require('googleapis');
 * const dialogflow = google.dialogflow('v2beta1');
 *
 * @namespace dialogflow
 * @type {Function}
 * @version v2beta1
 * @variation v2beta1
 * @param {object=} options Options for Dialogflow
 */
function Dialogflow(options) {
    const self = this;
    self._options = options || {};
    self.projects = {
        /**
         * dialogflow.projects.getAgent
         *
         * @desc Retrieves the specified agent.
         *
         * @alias dialogflow.projects.getAgent
         * @memberOf! dialogflow(v2beta1)
         *
         * @param {object} params Parameters for request
         * @param {string} params.parent Required. The project that the agent to fetch is associated with. Format: `projects/<Project ID>`.
         * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param {callback} callback The callback that handles the response.
         * @return {object} Request object
         */
        getAgent: function (params, options, callback) {
            if (typeof options === 'function') {
                callback = options;
                options = {};
            }
            options || (options = {});
            const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
            const parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v2beta1/{parent}/agent').replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['parent'],
                pathParams: ['parent'],
                context: self
            };
            return apirequest_1.createAPIRequest(parameters, callback);
        },
        agent: {
            /**
             * dialogflow.projects.agent.export
             *
             * @desc Exports the specified agent to a ZIP file.   Operation<response: ExportAgentResponse,           metadata: google.protobuf.Struct>
             *
             * @alias dialogflow.projects.agent.export
             * @memberOf! dialogflow(v2beta1)
             *
             * @param {object} params Parameters for request
             * @param {string} params.parent Required. The project that the agent to export is associated with. Format: `projects/<Project ID>`.
             * @param {dialogflow(v2beta1).ExportAgentRequest} params.resource Request body data
             * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
             * @param {callback} callback The callback that handles the response.
             * @return {object} Request object
             */
            export: function (params, options, callback) {
                if (typeof options === 'function') {
                    callback = options;
                    options = {};
                }
                options || (options = {});
                const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                const parameters = {
                    options: Object.assign({
                        url: (rootUrl + '/v2beta1/{parent}/agent:export').replace(/([^:]\/)\/+/g, '$1'),
                        method: 'POST'
                    }, options),
                    params: params,
                    requiredParams: ['parent'],
                    pathParams: ['parent'],
                    context: self
                };
                return apirequest_1.createAPIRequest(parameters, callback);
            },
            /**
             * dialogflow.projects.agent.import
             *
             * @desc Imports the specified agent from a ZIP file.  Uploads new intents and entity types without deleting the existing ones. Intents and entity types with the same name are replaced with the new versions from ImportAgentRequest.   Operation<response: google.protobuf.Empty,           metadata: google.protobuf.Struct>
             *
             * @alias dialogflow.projects.agent.import
             * @memberOf! dialogflow(v2beta1)
             *
             * @param {object} params Parameters for request
             * @param {string} params.parent Required. The project that the agent to import is associated with. Format: `projects/<Project ID>`.
             * @param {dialogflow(v2beta1).ImportAgentRequest} params.resource Request body data
             * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
             * @param {callback} callback The callback that handles the response.
             * @return {object} Request object
             */
            import: function (params, options, callback) {
                if (typeof options === 'function') {
                    callback = options;
                    options = {};
                }
                options || (options = {});
                const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                const parameters = {
                    options: Object.assign({
                        url: (rootUrl + '/v2beta1/{parent}/agent:import').replace(/([^:]\/)\/+/g, '$1'),
                        method: 'POST'
                    }, options),
                    params: params,
                    requiredParams: ['parent'],
                    pathParams: ['parent'],
                    context: self
                };
                return apirequest_1.createAPIRequest(parameters, callback);
            },
            /**
             * dialogflow.projects.agent.restore
             *
             * @desc Restores the specified agent from a ZIP file.  Replaces the current agent version with a new one. All the intents and entity types in the older version are deleted.   Operation<response: google.protobuf.Empty,           metadata: google.protobuf.Struct>
             *
             * @alias dialogflow.projects.agent.restore
             * @memberOf! dialogflow(v2beta1)
             *
             * @param {object} params Parameters for request
             * @param {string} params.parent Required. The project that the agent to restore is associated with. Format: `projects/<Project ID>`.
             * @param {dialogflow(v2beta1).RestoreAgentRequest} params.resource Request body data
             * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
             * @param {callback} callback The callback that handles the response.
             * @return {object} Request object
             */
            restore: function (params, options, callback) {
                if (typeof options === 'function') {
                    callback = options;
                    options = {};
                }
                options || (options = {});
                const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                const parameters = {
                    options: Object.assign({
                        url: (rootUrl + '/v2beta1/{parent}/agent:restore').replace(/([^:]\/)\/+/g, '$1'),
                        method: 'POST'
                    }, options),
                    params: params,
                    requiredParams: ['parent'],
                    pathParams: ['parent'],
                    context: self
                };
                return apirequest_1.createAPIRequest(parameters, callback);
            },
            /**
             * dialogflow.projects.agent.search
             *
             * @desc Returns the list of agents.  Since there is at most one conversational agent per project, this method is useful primarily for listing all agents across projects the caller has access to. One can achieve that with a wildcard project collection id "-". Refer to [List Sub-Collections](https://cloud.google.com/apis/design/design_patterns#list_sub-collections).
             *
             * @alias dialogflow.projects.agent.search
             * @memberOf! dialogflow(v2beta1)
             *
             * @param {object} params Parameters for request
             * @param {integer=} params.pageSize Optional. The maximum number of items to return in a single page. By default 100 and at most 1000.
             * @param {string=} params.pageToken Optional. The next_page_token value returned from a previous list request.
             * @param {string} params.parent Required. The project to list agents from. Format: `projects/<Project ID or '-'>`.
             * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
             * @param {callback} callback The callback that handles the response.
             * @return {object} Request object
             */
            search: function (params, options, callback) {
                if (typeof options === 'function') {
                    callback = options;
                    options = {};
                }
                options || (options = {});
                const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                const parameters = {
                    options: Object.assign({
                        url: (rootUrl + '/v2beta1/{parent}/agent:search').replace(/([^:]\/)\/+/g, '$1'),
                        method: 'GET'
                    }, options),
                    params: params,
                    requiredParams: ['parent'],
                    pathParams: ['parent'],
                    context: self
                };
                return apirequest_1.createAPIRequest(parameters, callback);
            },
            /**
             * dialogflow.projects.agent.train
             *
             * @desc Trains the specified agent.   Operation<response: google.protobuf.Empty,           metadata: google.protobuf.Struct>
             *
             * @alias dialogflow.projects.agent.train
             * @memberOf! dialogflow(v2beta1)
             *
             * @param {object} params Parameters for request
             * @param {string} params.parent Required. The project that the agent to train is associated with. Format: `projects/<Project ID>`.
             * @param {dialogflow(v2beta1).TrainAgentRequest} params.resource Request body data
             * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
             * @param {callback} callback The callback that handles the response.
             * @return {object} Request object
             */
            train: function (params, options, callback) {
                if (typeof options === 'function') {
                    callback = options;
                    options = {};
                }
                options || (options = {});
                const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                const parameters = {
                    options: Object.assign({
                        url: (rootUrl + '/v2beta1/{parent}/agent:train').replace(/([^:]\/)\/+/g, '$1'),
                        method: 'POST'
                    }, options),
                    params: params,
                    requiredParams: ['parent'],
                    pathParams: ['parent'],
                    context: self
                };
                return apirequest_1.createAPIRequest(parameters, callback);
            },
            entityTypes: {
                /**
                 * dialogflow.projects.agent.entityTypes.batchDelete
                 *
                 * @desc Deletes entity types in the specified agent.  Operation<response: google.protobuf.Empty,           metadata: google.protobuf.Struct>
                 *
                 * @alias dialogflow.projects.agent.entityTypes.batchDelete
                 * @memberOf! dialogflow(v2beta1)
                 *
                 * @param {object} params Parameters for request
                 * @param {string} params.parent Required. The name of the agent to delete all entities types for. Format: `projects/<Project ID>/agent`.
                 * @param {dialogflow(v2beta1).BatchDeleteEntityTypesRequest} params.resource Request body data
                 * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                 * @param {callback} callback The callback that handles the response.
                 * @return {object} Request object
                 */
                batchDelete: function (params, options, callback) {
                    if (typeof options === 'function') {
                        callback = options;
                        options = {};
                    }
                    options || (options = {});
                    const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                    const parameters = {
                        options: Object.assign({
                            url: (rootUrl + '/v2beta1/{parent}/entityTypes:batchDelete').replace(/([^:]\/)\/+/g, '$1'),
                            method: 'POST'
                        }, options),
                        params: params,
                        requiredParams: ['parent'],
                        pathParams: ['parent'],
                        context: self
                    };
                    return apirequest_1.createAPIRequest(parameters, callback);
                },
                /**
                 * dialogflow.projects.agent.entityTypes.batchUpdate
                 *
                 * @desc Updates/Creates multiple entity types in the specified agent.  Operation<response: BatchUpdateEntityTypesResponse,           metadata: google.protobuf.Struct>
                 *
                 * @alias dialogflow.projects.agent.entityTypes.batchUpdate
                 * @memberOf! dialogflow(v2beta1)
                 *
                 * @param {object} params Parameters for request
                 * @param {string} params.parent Required. The name of the agent to update or create entity types in. Format: `projects/<Project ID>/agent`.
                 * @param {dialogflow(v2beta1).BatchUpdateEntityTypesRequest} params.resource Request body data
                 * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                 * @param {callback} callback The callback that handles the response.
                 * @return {object} Request object
                 */
                batchUpdate: function (params, options, callback) {
                    if (typeof options === 'function') {
                        callback = options;
                        options = {};
                    }
                    options || (options = {});
                    const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                    const parameters = {
                        options: Object.assign({
                            url: (rootUrl + '/v2beta1/{parent}/entityTypes:batchUpdate').replace(/([^:]\/)\/+/g, '$1'),
                            method: 'POST'
                        }, options),
                        params: params,
                        requiredParams: ['parent'],
                        pathParams: ['parent'],
                        context: self
                    };
                    return apirequest_1.createAPIRequest(parameters, callback);
                },
                /**
                 * dialogflow.projects.agent.entityTypes.create
                 *
                 * @desc Creates an entity type in the specified agent.
                 *
                 * @alias dialogflow.projects.agent.entityTypes.create
                 * @memberOf! dialogflow(v2beta1)
                 *
                 * @param {object} params Parameters for request
                 * @param {string=} params.languageCode Optional. The language of entity synonyms defined in `entity_type`. If not specified, the agent's default language is used. [More than a dozen languages](https://dialogflow.com/docs/reference/language) are supported. Note: languages must be enabled in the agent, before they can be used.
                 * @param {string} params.parent Required. The agent to create a entity type for. Format: `projects/<Project ID>/agent`.
                 * @param {dialogflow(v2beta1).EntityType} params.resource Request body data
                 * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                 * @param {callback} callback The callback that handles the response.
                 * @return {object} Request object
                 */
                create: function (params, options, callback) {
                    if (typeof options === 'function') {
                        callback = options;
                        options = {};
                    }
                    options || (options = {});
                    const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                    const parameters = {
                        options: Object.assign({
                            url: (rootUrl + '/v2beta1/{parent}/entityTypes').replace(/([^:]\/)\/+/g, '$1'),
                            method: 'POST'
                        }, options),
                        params: params,
                        requiredParams: ['parent'],
                        pathParams: ['parent'],
                        context: self
                    };
                    return apirequest_1.createAPIRequest(parameters, callback);
                },
                /**
                 * dialogflow.projects.agent.entityTypes.delete
                 *
                 * @desc Deletes the specified entity type.
                 *
                 * @alias dialogflow.projects.agent.entityTypes.delete
                 * @memberOf! dialogflow(v2beta1)
                 *
                 * @param {object} params Parameters for request
                 * @param {string} params.name Required. The name of the entity type to delete. Format: `projects/<Project ID>/agent/entityTypes/<EntityType ID>`.
                 * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                 * @param {callback} callback The callback that handles the response.
                 * @return {object} Request object
                 */
                delete: function (params, options, callback) {
                    if (typeof options === 'function') {
                        callback = options;
                        options = {};
                    }
                    options || (options = {});
                    const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                    const parameters = {
                        options: Object.assign({
                            url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                            method: 'DELETE'
                        }, options),
                        params: params,
                        requiredParams: ['name'],
                        pathParams: ['name'],
                        context: self
                    };
                    return apirequest_1.createAPIRequest(parameters, callback);
                },
                /**
                 * dialogflow.projects.agent.entityTypes.get
                 *
                 * @desc Retrieves the specified entity type.
                 *
                 * @alias dialogflow.projects.agent.entityTypes.get
                 * @memberOf! dialogflow(v2beta1)
                 *
                 * @param {object} params Parameters for request
                 * @param {string=} params.languageCode Optional. The language to retrieve entity synonyms for. If not specified, the agent's default language is used. [More than a dozen languages](https://dialogflow.com/docs/reference/language) are supported. Note: languages must be enabled in the agent, before they can be used.
                 * @param {string} params.name Required. The name of the entity type. Format: `projects/<Project ID>/agent/entityTypes/<EntityType ID>`.
                 * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                 * @param {callback} callback The callback that handles the response.
                 * @return {object} Request object
                 */
                get: function (params, options, callback) {
                    if (typeof options === 'function') {
                        callback = options;
                        options = {};
                    }
                    options || (options = {});
                    const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                    const parameters = {
                        options: Object.assign({
                            url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                            method: 'GET'
                        }, options),
                        params: params,
                        requiredParams: ['name'],
                        pathParams: ['name'],
                        context: self
                    };
                    return apirequest_1.createAPIRequest(parameters, callback);
                },
                /**
                 * dialogflow.projects.agent.entityTypes.list
                 *
                 * @desc Returns the list of all entity types in the specified agent.
                 *
                 * @alias dialogflow.projects.agent.entityTypes.list
                 * @memberOf! dialogflow(v2beta1)
                 *
                 * @param {object} params Parameters for request
                 * @param {string=} params.languageCode Optional. The language to list entity synonyms for. If not specified, the agent's default language is used. [More than a dozen languages](https://dialogflow.com/docs/reference/language) are supported. Note: languages must be enabled in the agent, before they can be used.
                 * @param {integer=} params.pageSize Optional. The maximum number of items to return in a single page. By default 100 and at most 1000.
                 * @param {string=} params.pageToken Optional. The next_page_token value returned from a previous list request.
                 * @param {string} params.parent Required. The agent to list all entity types from. Format: `projects/<Project ID>/agent`.
                 * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                 * @param {callback} callback The callback that handles the response.
                 * @return {object} Request object
                 */
                list: function (params, options, callback) {
                    if (typeof options === 'function') {
                        callback = options;
                        options = {};
                    }
                    options || (options = {});
                    const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                    const parameters = {
                        options: Object.assign({
                            url: (rootUrl + '/v2beta1/{parent}/entityTypes').replace(/([^:]\/)\/+/g, '$1'),
                            method: 'GET'
                        }, options),
                        params: params,
                        requiredParams: ['parent'],
                        pathParams: ['parent'],
                        context: self
                    };
                    return apirequest_1.createAPIRequest(parameters, callback);
                },
                /**
                 * dialogflow.projects.agent.entityTypes.patch
                 *
                 * @desc Updates the specified entity type.
                 *
                 * @alias dialogflow.projects.agent.entityTypes.patch
                 * @memberOf! dialogflow(v2beta1)
                 *
                 * @param {object} params Parameters for request
                 * @param {string=} params.languageCode Optional. The language of entity synonyms defined in `entity_type`. If not specified, the agent's default language is used. [More than a dozen languages](https://dialogflow.com/docs/reference/language) are supported. Note: languages must be enabled in the agent, before they can be used.
                 * @param {string} params.name Required for all methods except `create` (`create` populates the name automatically. The unique identifier of the entity type. Format: `projects/<Project ID>/agent/entityTypes/<Entity Type ID>`.
                 * @param {string=} params.updateMask Optional. The mask to control which fields get updated.
                 * @param {dialogflow(v2beta1).EntityType} params.resource Request body data
                 * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                 * @param {callback} callback The callback that handles the response.
                 * @return {object} Request object
                 */
                patch: function (params, options, callback) {
                    if (typeof options === 'function') {
                        callback = options;
                        options = {};
                    }
                    options || (options = {});
                    const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                    const parameters = {
                        options: Object.assign({
                            url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                            method: 'PATCH'
                        }, options),
                        params: params,
                        requiredParams: ['name'],
                        pathParams: ['name'],
                        context: self
                    };
                    return apirequest_1.createAPIRequest(parameters, callback);
                },
                entities: {
                    /**
                     * dialogflow.projects.agent.entityTypes.entities.batchCreate
                     *
                     * @desc Creates multiple new entities in the specified entity type (extends the existing collection of entries).  Operation<response: google.protobuf.Empty>
                     *
                     * @alias dialogflow.projects.agent.entityTypes.entities.batchCreate
                     * @memberOf! dialogflow(v2beta1)
                     *
                     * @param {object} params Parameters for request
                     * @param {string} params.parent Required. The name of the entity type to create entities in. Format: `projects/<Project ID>/agent/entityTypes/<Entity Type ID>`.
                     * @param {dialogflow(v2beta1).BatchCreateEntitiesRequest} params.resource Request body data
                     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                     * @param {callback} callback The callback that handles the response.
                     * @return {object} Request object
                     */
                    batchCreate: function (params, options, callback) {
                        if (typeof options === 'function') {
                            callback = options;
                            options = {};
                        }
                        options || (options = {});
                        const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                        const parameters = {
                            options: Object.assign({
                                url: (rootUrl + '/v2beta1/{parent}/entities:batchCreate').replace(/([^:]\/)\/+/g, '$1'),
                                method: 'POST'
                            }, options),
                            params: params,
                            requiredParams: ['parent'],
                            pathParams: ['parent'],
                            context: self
                        };
                        return apirequest_1.createAPIRequest(parameters, callback);
                    },
                    /**
                     * dialogflow.projects.agent.entityTypes.entities.batchDelete
                     *
                     * @desc Deletes entities in the specified entity type.  Operation<response: google.protobuf.Empty,           metadata: google.protobuf.Struct>
                     *
                     * @alias dialogflow.projects.agent.entityTypes.entities.batchDelete
                     * @memberOf! dialogflow(v2beta1)
                     *
                     * @param {object} params Parameters for request
                     * @param {string} params.parent Required. The name of the entity type to delete entries for. Format: `projects/<Project ID>/agent/entityTypes/<Entity Type ID>`.
                     * @param {dialogflow(v2beta1).BatchDeleteEntitiesRequest} params.resource Request body data
                     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                     * @param {callback} callback The callback that handles the response.
                     * @return {object} Request object
                     */
                    batchDelete: function (params, options, callback) {
                        if (typeof options === 'function') {
                            callback = options;
                            options = {};
                        }
                        options || (options = {});
                        const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                        const parameters = {
                            options: Object.assign({
                                url: (rootUrl + '/v2beta1/{parent}/entities:batchDelete').replace(/([^:]\/)\/+/g, '$1'),
                                method: 'POST'
                            }, options),
                            params: params,
                            requiredParams: ['parent'],
                            pathParams: ['parent'],
                            context: self
                        };
                        return apirequest_1.createAPIRequest(parameters, callback);
                    },
                    /**
                     * dialogflow.projects.agent.entityTypes.entities.batchUpdate
                     *
                     * @desc Updates entities in the specified entity type (replaces the existing collection of entries).  Operation<response: google.protobuf.Empty,           metadata: google.protobuf.Struct>
                     *
                     * @alias dialogflow.projects.agent.entityTypes.entities.batchUpdate
                     * @memberOf! dialogflow(v2beta1)
                     *
                     * @param {object} params Parameters for request
                     * @param {string} params.parent Required. The name of the entity type to update the entities in. Format: `projects/<Project ID>/agent/entityTypes/<Entity Type ID>`.
                     * @param {dialogflow(v2beta1).BatchUpdateEntitiesRequest} params.resource Request body data
                     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                     * @param {callback} callback The callback that handles the response.
                     * @return {object} Request object
                     */
                    batchUpdate: function (params, options, callback) {
                        if (typeof options === 'function') {
                            callback = options;
                            options = {};
                        }
                        options || (options = {});
                        const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                        const parameters = {
                            options: Object.assign({
                                url: (rootUrl + '/v2beta1/{parent}/entities:batchUpdate').replace(/([^:]\/)\/+/g, '$1'),
                                method: 'POST'
                            }, options),
                            params: params,
                            requiredParams: ['parent'],
                            pathParams: ['parent'],
                            context: self
                        };
                        return apirequest_1.createAPIRequest(parameters, callback);
                    }
                }
            },
            intents: {
                /**
                 * dialogflow.projects.agent.intents.batchDelete
                 *
                 * @desc Deletes intents in the specified agent.  Operation<response: google.protobuf.Empty>
                 *
                 * @alias dialogflow.projects.agent.intents.batchDelete
                 * @memberOf! dialogflow(v2beta1)
                 *
                 * @param {object} params Parameters for request
                 * @param {string} params.parent Required. The name of the agent to delete all entities types for. Format: `projects/<Project ID>/agent`.
                 * @param {dialogflow(v2beta1).BatchDeleteIntentsRequest} params.resource Request body data
                 * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                 * @param {callback} callback The callback that handles the response.
                 * @return {object} Request object
                 */
                batchDelete: function (params, options, callback) {
                    if (typeof options === 'function') {
                        callback = options;
                        options = {};
                    }
                    options || (options = {});
                    const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                    const parameters = {
                        options: Object.assign({
                            url: (rootUrl + '/v2beta1/{parent}/intents:batchDelete').replace(/([^:]\/)\/+/g, '$1'),
                            method: 'POST'
                        }, options),
                        params: params,
                        requiredParams: ['parent'],
                        pathParams: ['parent'],
                        context: self
                    };
                    return apirequest_1.createAPIRequest(parameters, callback);
                },
                /**
                 * dialogflow.projects.agent.intents.batchUpdate
                 *
                 * @desc Updates/Creates multiple intents in the specified agent.  Operation<response: BatchUpdateIntentsResponse>
                 *
                 * @alias dialogflow.projects.agent.intents.batchUpdate
                 * @memberOf! dialogflow(v2beta1)
                 *
                 * @param {object} params Parameters for request
                 * @param {string} params.parent Required. The name of the agent to update or create intents in. Format: `projects/<Project ID>/agent`.
                 * @param {dialogflow(v2beta1).BatchUpdateIntentsRequest} params.resource Request body data
                 * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                 * @param {callback} callback The callback that handles the response.
                 * @return {object} Request object
                 */
                batchUpdate: function (params, options, callback) {
                    if (typeof options === 'function') {
                        callback = options;
                        options = {};
                    }
                    options || (options = {});
                    const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                    const parameters = {
                        options: Object.assign({
                            url: (rootUrl + '/v2beta1/{parent}/intents:batchUpdate').replace(/([^:]\/)\/+/g, '$1'),
                            method: 'POST'
                        }, options),
                        params: params,
                        requiredParams: ['parent'],
                        pathParams: ['parent'],
                        context: self
                    };
                    return apirequest_1.createAPIRequest(parameters, callback);
                },
                /**
                 * dialogflow.projects.agent.intents.create
                 *
                 * @desc Creates an intent in the specified agent.
                 *
                 * @alias dialogflow.projects.agent.intents.create
                 * @memberOf! dialogflow(v2beta1)
                 *
                 * @param {object} params Parameters for request
                 * @param {string=} params.intentView Optional. The resource view to apply to the returned intent.
                 * @param {string=} params.languageCode Optional. The language of training phrases, parameters and rich messages defined in `intent`. If not specified, the agent's default language is used. [More than a dozen languages](https://dialogflow.com/docs/reference/language) are supported. Note: languages must be enabled in the agent, before they can be used.
                 * @param {string} params.parent Required. The agent to create a intent for. Format: `projects/<Project ID>/agent`.
                 * @param {dialogflow(v2beta1).Intent} params.resource Request body data
                 * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                 * @param {callback} callback The callback that handles the response.
                 * @return {object} Request object
                 */
                create: function (params, options, callback) {
                    if (typeof options === 'function') {
                        callback = options;
                        options = {};
                    }
                    options || (options = {});
                    const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                    const parameters = {
                        options: Object.assign({
                            url: (rootUrl + '/v2beta1/{parent}/intents').replace(/([^:]\/)\/+/g, '$1'),
                            method: 'POST'
                        }, options),
                        params: params,
                        requiredParams: ['parent'],
                        pathParams: ['parent'],
                        context: self
                    };
                    return apirequest_1.createAPIRequest(parameters, callback);
                },
                /**
                 * dialogflow.projects.agent.intents.delete
                 *
                 * @desc Deletes the specified intent.
                 *
                 * @alias dialogflow.projects.agent.intents.delete
                 * @memberOf! dialogflow(v2beta1)
                 *
                 * @param {object} params Parameters for request
                 * @param {string} params.name Required. The name of the intent to delete. Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
                 * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                 * @param {callback} callback The callback that handles the response.
                 * @return {object} Request object
                 */
                delete: function (params, options, callback) {
                    if (typeof options === 'function') {
                        callback = options;
                        options = {};
                    }
                    options || (options = {});
                    const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                    const parameters = {
                        options: Object.assign({
                            url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                            method: 'DELETE'
                        }, options),
                        params: params,
                        requiredParams: ['name'],
                        pathParams: ['name'],
                        context: self
                    };
                    return apirequest_1.createAPIRequest(parameters, callback);
                },
                /**
                 * dialogflow.projects.agent.intents.get
                 *
                 * @desc Retrieves the specified intent.
                 *
                 * @alias dialogflow.projects.agent.intents.get
                 * @memberOf! dialogflow(v2beta1)
                 *
                 * @param {object} params Parameters for request
                 * @param {string=} params.intentView Optional. The resource view to apply to the returned intent.
                 * @param {string=} params.languageCode Optional. The language to retrieve training phrases, parameters and rich messages for. If not specified, the agent's default language is used. [More than a dozen languages](https://dialogflow.com/docs/reference/language) are supported. Note: languages must be enabled in the agent, before they can be used.
                 * @param {string} params.name Required. The name of the intent. Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
                 * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                 * @param {callback} callback The callback that handles the response.
                 * @return {object} Request object
                 */
                get: function (params, options, callback) {
                    if (typeof options === 'function') {
                        callback = options;
                        options = {};
                    }
                    options || (options = {});
                    const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                    const parameters = {
                        options: Object.assign({
                            url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                            method: 'GET'
                        }, options),
                        params: params,
                        requiredParams: ['name'],
                        pathParams: ['name'],
                        context: self
                    };
                    return apirequest_1.createAPIRequest(parameters, callback);
                },
                /**
                 * dialogflow.projects.agent.intents.list
                 *
                 * @desc Returns the list of all intents in the specified agent.
                 *
                 * @alias dialogflow.projects.agent.intents.list
                 * @memberOf! dialogflow(v2beta1)
                 *
                 * @param {object} params Parameters for request
                 * @param {string=} params.intentView Optional. The resource view to apply to the returned intent.
                 * @param {string=} params.languageCode Optional. The language to list training phrases, parameters and rich messages for. If not specified, the agent's default language is used. [More than a dozen languages](https://dialogflow.com/docs/reference/language) are supported. Note: languages must be enabled in the agent before they can be used.
                 * @param {integer=} params.pageSize Optional. The maximum number of items to return in a single page. By default 100 and at most 1000.
                 * @param {string=} params.pageToken Optional. The next_page_token value returned from a previous list request.
                 * @param {string} params.parent Required. The agent to list all intents from. Format: `projects/<Project ID>/agent`.
                 * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                 * @param {callback} callback The callback that handles the response.
                 * @return {object} Request object
                 */
                list: function (params, options, callback) {
                    if (typeof options === 'function') {
                        callback = options;
                        options = {};
                    }
                    options || (options = {});
                    const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                    const parameters = {
                        options: Object.assign({
                            url: (rootUrl + '/v2beta1/{parent}/intents').replace(/([^:]\/)\/+/g, '$1'),
                            method: 'GET'
                        }, options),
                        params: params,
                        requiredParams: ['parent'],
                        pathParams: ['parent'],
                        context: self
                    };
                    return apirequest_1.createAPIRequest(parameters, callback);
                },
                /**
                 * dialogflow.projects.agent.intents.patch
                 *
                 * @desc Updates the specified intent.
                 *
                 * @alias dialogflow.projects.agent.intents.patch
                 * @memberOf! dialogflow(v2beta1)
                 *
                 * @param {object} params Parameters for request
                 * @param {string=} params.intentView Optional. The resource view to apply to the returned intent.
                 * @param {string=} params.languageCode Optional. The language of training phrases, parameters and rich messages defined in `intent`. If not specified, the agent's default language is used. [More than a dozen languages](https://dialogflow.com/docs/reference/language) are supported. Note: languages must be enabled in the agent, before they can be used.
                 * @param {string} params.name Required for all methods except `create` (`create` populates the name automatically. The unique identifier of this intent. Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
                 * @param {string=} params.updateMask Optional. The mask to control which fields get updated.
                 * @param {dialogflow(v2beta1).Intent} params.resource Request body data
                 * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                 * @param {callback} callback The callback that handles the response.
                 * @return {object} Request object
                 */
                patch: function (params, options, callback) {
                    if (typeof options === 'function') {
                        callback = options;
                        options = {};
                    }
                    options || (options = {});
                    const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                    const parameters = {
                        options: Object.assign({
                            url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                            method: 'PATCH'
                        }, options),
                        params: params,
                        requiredParams: ['name'],
                        pathParams: ['name'],
                        context: self
                    };
                    return apirequest_1.createAPIRequest(parameters, callback);
                }
            },
            sessions: {
                /**
                 * dialogflow.projects.agent.sessions.deleteContexts
                 *
                 * @desc Deletes all active contexts in the specified session.
                 *
                 * @alias dialogflow.projects.agent.sessions.deleteContexts
                 * @memberOf! dialogflow(v2beta1)
                 *
                 * @param {object} params Parameters for request
                 * @param {string} params.parent Required. The name of the session to delete all contexts from. Format: `projects/<Project ID>/agent/sessions/<Session ID>`.
                 * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                 * @param {callback} callback The callback that handles the response.
                 * @return {object} Request object
                 */
                deleteContexts: function (params, options, callback) {
                    if (typeof options === 'function') {
                        callback = options;
                        options = {};
                    }
                    options || (options = {});
                    const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                    const parameters = {
                        options: Object.assign({
                            url: (rootUrl + '/v2beta1/{parent}/contexts').replace(/([^:]\/)\/+/g, '$1'),
                            method: 'DELETE'
                        }, options),
                        params: params,
                        requiredParams: ['parent'],
                        pathParams: ['parent'],
                        context: self
                    };
                    return apirequest_1.createAPIRequest(parameters, callback);
                },
                /**
                 * dialogflow.projects.agent.sessions.detectIntent
                 *
                 * @desc Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be updated, which in turn might affect results of future queries.
                 *
                 * @alias dialogflow.projects.agent.sessions.detectIntent
                 * @memberOf! dialogflow(v2beta1)
                 *
                 * @param {object} params Parameters for request
                 * @param {string} params.session Required. The name of the session this query is sent to. Format: `projects/<Project ID>/agent/sessions/<Session ID>`. It's up to the API caller to choose an appropriate session ID. It can be a random number or some type of user identifier (preferably hashed). The length of the session ID must not exceed 36 bytes.
                 * @param {dialogflow(v2beta1).DetectIntentRequest} params.resource Request body data
                 * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                 * @param {callback} callback The callback that handles the response.
                 * @return {object} Request object
                 */
                detectIntent: function (params, options, callback) {
                    if (typeof options === 'function') {
                        callback = options;
                        options = {};
                    }
                    options || (options = {});
                    const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                    const parameters = {
                        options: Object.assign({
                            url: (rootUrl + '/v2beta1/{session}:detectIntent').replace(/([^:]\/)\/+/g, '$1'),
                            method: 'POST'
                        }, options),
                        params: params,
                        requiredParams: ['session'],
                        pathParams: ['session'],
                        context: self
                    };
                    return apirequest_1.createAPIRequest(parameters, callback);
                },
                contexts: {
                    /**
                     * dialogflow.projects.agent.sessions.contexts.create
                     *
                     * @desc Creates a context.
                     *
                     * @alias dialogflow.projects.agent.sessions.contexts.create
                     * @memberOf! dialogflow(v2beta1)
                     *
                     * @param {object} params Parameters for request
                     * @param {string} params.parent Required. The session to create a context for. Format: `projects/<Project ID>/agent/sessions/<Session ID>`.
                     * @param {dialogflow(v2beta1).Context} params.resource Request body data
                     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                     * @param {callback} callback The callback that handles the response.
                     * @return {object} Request object
                     */
                    create: function (params, options, callback) {
                        if (typeof options === 'function') {
                            callback = options;
                            options = {};
                        }
                        options || (options = {});
                        const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                        const parameters = {
                            options: Object.assign({
                                url: (rootUrl + '/v2beta1/{parent}/contexts').replace(/([^:]\/)\/+/g, '$1'),
                                method: 'POST'
                            }, options),
                            params: params,
                            requiredParams: ['parent'],
                            pathParams: ['parent'],
                            context: self
                        };
                        return apirequest_1.createAPIRequest(parameters, callback);
                    },
                    /**
                     * dialogflow.projects.agent.sessions.contexts.delete
                     *
                     * @desc Deletes the specified context.
                     *
                     * @alias dialogflow.projects.agent.sessions.contexts.delete
                     * @memberOf! dialogflow(v2beta1)
                     *
                     * @param {object} params Parameters for request
                     * @param {string} params.name Required. The name of the context to delete. Format: `projects/<Project ID>/agent/sessions/<Session ID>/contexts/<Context ID>`.
                     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                     * @param {callback} callback The callback that handles the response.
                     * @return {object} Request object
                     */
                    delete: function (params, options, callback) {
                        if (typeof options === 'function') {
                            callback = options;
                            options = {};
                        }
                        options || (options = {});
                        const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                        const parameters = {
                            options: Object.assign({
                                url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                                method: 'DELETE'
                            }, options),
                            params: params,
                            requiredParams: ['name'],
                            pathParams: ['name'],
                            context: self
                        };
                        return apirequest_1.createAPIRequest(parameters, callback);
                    },
                    /**
                     * dialogflow.projects.agent.sessions.contexts.get
                     *
                     * @desc Retrieves the specified context.
                     *
                     * @alias dialogflow.projects.agent.sessions.contexts.get
                     * @memberOf! dialogflow(v2beta1)
                     *
                     * @param {object} params Parameters for request
                     * @param {string} params.name Required. The name of the context. Format: `projects/<Project ID>/agent/sessions/<Session ID>/contexts/<Context ID>`.
                     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                     * @param {callback} callback The callback that handles the response.
                     * @return {object} Request object
                     */
                    get: function (params, options, callback) {
                        if (typeof options === 'function') {
                            callback = options;
                            options = {};
                        }
                        options || (options = {});
                        const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                        const parameters = {
                            options: Object.assign({
                                url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                                method: 'GET'
                            }, options),
                            params: params,
                            requiredParams: ['name'],
                            pathParams: ['name'],
                            context: self
                        };
                        return apirequest_1.createAPIRequest(parameters, callback);
                    },
                    /**
                     * dialogflow.projects.agent.sessions.contexts.list
                     *
                     * @desc Returns the list of all contexts in the specified session.
                     *
                     * @alias dialogflow.projects.agent.sessions.contexts.list
                     * @memberOf! dialogflow(v2beta1)
                     *
                     * @param {object} params Parameters for request
                     * @param {integer=} params.pageSize Optional. The maximum number of items to return in a single page. By default 100 and at most 1000.
                     * @param {string=} params.pageToken Optional. The next_page_token value returned from a previous list request.
                     * @param {string} params.parent Required. The session to list all contexts from. Format: `projects/<Project ID>/agent/sessions/<Session ID>`.
                     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                     * @param {callback} callback The callback that handles the response.
                     * @return {object} Request object
                     */
                    list: function (params, options, callback) {
                        if (typeof options === 'function') {
                            callback = options;
                            options = {};
                        }
                        options || (options = {});
                        const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                        const parameters = {
                            options: Object.assign({
                                url: (rootUrl + '/v2beta1/{parent}/contexts').replace(/([^:]\/)\/+/g, '$1'),
                                method: 'GET'
                            }, options),
                            params: params,
                            requiredParams: ['parent'],
                            pathParams: ['parent'],
                            context: self
                        };
                        return apirequest_1.createAPIRequest(parameters, callback);
                    },
                    /**
                     * dialogflow.projects.agent.sessions.contexts.patch
                     *
                     * @desc Updates the specified context.
                     *
                     * @alias dialogflow.projects.agent.sessions.contexts.patch
                     * @memberOf! dialogflow(v2beta1)
                     *
                     * @param {object} params Parameters for request
                     * @param {string} params.name Required. The unique identifier of the context. Format: `projects/<Project ID>/agent/sessions/<Session ID>/contexts/<Context ID>`. Note: The Context ID is always converted to lowercase.
                     * @param {string=} params.updateMask Optional. The mask to control which fields get updated.
                     * @param {dialogflow(v2beta1).Context} params.resource Request body data
                     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                     * @param {callback} callback The callback that handles the response.
                     * @return {object} Request object
                     */
                    patch: function (params, options, callback) {
                        if (typeof options === 'function') {
                            callback = options;
                            options = {};
                        }
                        options || (options = {});
                        const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                        const parameters = {
                            options: Object.assign({
                                url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                                method: 'PATCH'
                            }, options),
                            params: params,
                            requiredParams: ['name'],
                            pathParams: ['name'],
                            context: self
                        };
                        return apirequest_1.createAPIRequest(parameters, callback);
                    }
                },
                entityTypes: {
                    /**
                     * dialogflow.projects.agent.sessions.entityTypes.create
                     *
                     * @desc Creates a session entity type.
                     *
                     * @alias dialogflow.projects.agent.sessions.entityTypes.create
                     * @memberOf! dialogflow(v2beta1)
                     *
                     * @param {object} params Parameters for request
                     * @param {string} params.parent Required. The session to create a session entity type for. Format: `projects/<Project ID>/agent/sessions/<Session ID>`.
                     * @param {dialogflow(v2beta1).SessionEntityType} params.resource Request body data
                     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                     * @param {callback} callback The callback that handles the response.
                     * @return {object} Request object
                     */
                    create: function (params, options, callback) {
                        if (typeof options === 'function') {
                            callback = options;
                            options = {};
                        }
                        options || (options = {});
                        const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                        const parameters = {
                            options: Object.assign({
                                url: (rootUrl + '/v2beta1/{parent}/entityTypes').replace(/([^:]\/)\/+/g, '$1'),
                                method: 'POST'
                            }, options),
                            params: params,
                            requiredParams: ['parent'],
                            pathParams: ['parent'],
                            context: self
                        };
                        return apirequest_1.createAPIRequest(parameters, callback);
                    },
                    /**
                     * dialogflow.projects.agent.sessions.entityTypes.delete
                     *
                     * @desc Deletes the specified session entity type.
                     *
                     * @alias dialogflow.projects.agent.sessions.entityTypes.delete
                     * @memberOf! dialogflow(v2beta1)
                     *
                     * @param {object} params Parameters for request
                     * @param {string} params.name Required. The name of the entity type to delete. Format: `projects/<Project ID>/agent/sessions/<Session ID>/entityTypes/<Entity Type Display Name>`.
                     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                     * @param {callback} callback The callback that handles the response.
                     * @return {object} Request object
                     */
                    delete: function (params, options, callback) {
                        if (typeof options === 'function') {
                            callback = options;
                            options = {};
                        }
                        options || (options = {});
                        const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                        const parameters = {
                            options: Object.assign({
                                url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                                method: 'DELETE'
                            }, options),
                            params: params,
                            requiredParams: ['name'],
                            pathParams: ['name'],
                            context: self
                        };
                        return apirequest_1.createAPIRequest(parameters, callback);
                    },
                    /**
                     * dialogflow.projects.agent.sessions.entityTypes.get
                     *
                     * @desc Retrieves the specified session entity type.
                     *
                     * @alias dialogflow.projects.agent.sessions.entityTypes.get
                     * @memberOf! dialogflow(v2beta1)
                     *
                     * @param {object} params Parameters for request
                     * @param {string} params.name Required. The name of the session entity type. Format: `projects/<Project ID>/agent/sessions/<Session ID>/entityTypes/<Entity Type Display Name>`.
                     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                     * @param {callback} callback The callback that handles the response.
                     * @return {object} Request object
                     */
                    get: function (params, options, callback) {
                        if (typeof options === 'function') {
                            callback = options;
                            options = {};
                        }
                        options || (options = {});
                        const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                        const parameters = {
                            options: Object.assign({
                                url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                                method: 'GET'
                            }, options),
                            params: params,
                            requiredParams: ['name'],
                            pathParams: ['name'],
                            context: self
                        };
                        return apirequest_1.createAPIRequest(parameters, callback);
                    },
                    /**
                     * dialogflow.projects.agent.sessions.entityTypes.list
                     *
                     * @desc Returns the list of all session entity types in the specified session.
                     *
                     * @alias dialogflow.projects.agent.sessions.entityTypes.list
                     * @memberOf! dialogflow(v2beta1)
                     *
                     * @param {object} params Parameters for request
                     * @param {integer=} params.pageSize Optional. The maximum number of items to return in a single page. By default 100 and at most 1000.
                     * @param {string=} params.pageToken Optional. The next_page_token value returned from a previous list request.
                     * @param {string} params.parent Required. The session to list all session entity types from. Format: `projects/<Project ID>/agent/sessions/<Session ID>`.
                     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                     * @param {callback} callback The callback that handles the response.
                     * @return {object} Request object
                     */
                    list: function (params, options, callback) {
                        if (typeof options === 'function') {
                            callback = options;
                            options = {};
                        }
                        options || (options = {});
                        const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                        const parameters = {
                            options: Object.assign({
                                url: (rootUrl + '/v2beta1/{parent}/entityTypes').replace(/([^:]\/)\/+/g, '$1'),
                                method: 'GET'
                            }, options),
                            params: params,
                            requiredParams: ['parent'],
                            pathParams: ['parent'],
                            context: self
                        };
                        return apirequest_1.createAPIRequest(parameters, callback);
                    },
                    /**
                     * dialogflow.projects.agent.sessions.entityTypes.patch
                     *
                     * @desc Updates the specified session entity type.
                     *
                     * @alias dialogflow.projects.agent.sessions.entityTypes.patch
                     * @memberOf! dialogflow(v2beta1)
                     *
                     * @param {object} params Parameters for request
                     * @param {string} params.name Required. The unique identifier of this session entity type. Format: `projects/<Project ID>/agent/sessions/<Session ID>/entityTypes/<Entity Type Display Name>`.
                     * @param {string=} params.updateMask Optional. The mask to control which fields get updated.
                     * @param {dialogflow(v2beta1).SessionEntityType} params.resource Request body data
                     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
                     * @param {callback} callback The callback that handles the response.
                     * @return {object} Request object
                     */
                    patch: function (params, options, callback) {
                        if (typeof options === 'function') {
                            callback = options;
                            options = {};
                        }
                        options || (options = {});
                        const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                        const parameters = {
                            options: Object.assign({
                                url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                                method: 'PATCH'
                            }, options),
                            params: params,
                            requiredParams: ['name'],
                            pathParams: ['name'],
                            context: self
                        };
                        return apirequest_1.createAPIRequest(parameters, callback);
                    }
                }
            }
        },
        operations: {
            /**
             * dialogflow.projects.operations.get
             *
             * @desc Gets the latest state of a long-running operation.  Clients can use this method to poll the operation result at intervals as recommended by the API service.
             *
             * @alias dialogflow.projects.operations.get
             * @memberOf! dialogflow(v2beta1)
             *
             * @param {object} params Parameters for request
             * @param {string} params.name The name of the operation resource.
             * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
             * @param {callback} callback The callback that handles the response.
             * @return {object} Request object
             */
            get: function (params, options, callback) {
                if (typeof options === 'function') {
                    callback = options;
                    options = {};
                }
                options || (options = {});
                const rootUrl = options.rootUrl || 'https://dialogflow.googleapis.com/';
                const parameters = {
                    options: Object.assign({
                        url: (rootUrl + '/v2beta1/{name}').replace(/([^:]\/)\/+/g, '$1'),
                        method: 'GET'
                    }, options),
                    params: params,
                    requiredParams: ['name'],
                    pathParams: ['name'],
                    context: self
                };
                return apirequest_1.createAPIRequest(parameters, callback);
            }
        }
    };
}
module.exports = Dialogflow;
//# sourceMappingURL=v2beta1.js.map